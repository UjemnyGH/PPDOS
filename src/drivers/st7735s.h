#ifndef _PPDOS_DRIVER_ST7735S_
#define _PPDOS_DRIVER_ST7735S_

#include "../common/shared_defs.h"

#define ST7735_USE_SPI_DEFAULT_CS1  0xFF
#define ST7735_WIDTH 160
#define ST7735_HEIGHT 128

#define ST7735_COLOR_18(r, g, b) (((b & 0x3F) << 2) | ((g & 0x3F) << 10) | ((r & 0x3F) << 18))
#define ST7735_COLOR_16(r, g, b) ((b & 0x1F) | ((g & 0x3F) << 5) | ((r & 0x1F) << 11))
#define ST7735_COLOR_12(r, g, b) ((b & 0xF) | ((g & 0xF) << 4) | ((r & 0xF) << 8))

#define ST7735_X_OFFSET_VERT 1
#define ST7735_Y_OFFSET_VERT 2

typedef struct st7735s_s {
  uint8_t chipSelectPin;
  uint8_t dataCommandPin;
  uint8_t resetPin;
  uint8_t backlightPin;

  uint32_t initialized;

  /* Setup for 16bit */
  uint16_t framebuffer[ST7735_HEIGHT * ST7735_WIDTH];
} st7735s_t;

enum st7735s_command {
  st_command_nop              = 0x0,
  st_command_softReset        = 0x1,
  st_command_sleepIn          = 0x10,
  st_command_sleepOut         = 0x11,
  st_command_partialOn        = 0x12,
  st_command_partialOff       = 0x13,
  st_command_inversionOff     = 0x20,
  st_command_inversionOn      = 0x21,
  st_command_gammaCurveSel    = 0x26,
  st_command_displayOff       = 0x28,
  st_command_displayOn        = 0x29,
  st_command_columnAddrSet    = 0x2A,
  st_command_rowAddrSet       = 0x2B,
  st_command_memoryWrite      = 0x2C,
  st_command_lutRGBSet        = 0x2D,
  st_command_partialAddrSet   = 0x30,
  st_command_scrollAreaSet    = 0x33,
  st_command_tearingOff       = 0x34,
  st_command_tearingOn        = 0x35,
  st_command_memDataAccessCtl = 0x36,
  st_command_scrollStartAddr  = 0x37,
  st_command_idleOff          = 0x38,
  st_command_idleOn           = 0x39,
  st_command_interPixelFormat = 0x3A,
  st_command_frameCtl1Normal  = 0xB1,
  st_command_frameCtl2Idle    = 0xB2,
  st_command_frameCtl3Partial = 0xB3,
  st_command_displayInvCtl    = 0xB4,
  st_command_powerCtl1        = 0xC0,
  st_command_powerCtl2        = 0xC1,
  st_command_powerCtl3Normal  = 0xC2,
  st_command_powerCtl4Idle    = 0xC3,
  st_command_powerCtl5Partial = 0xC4,
  st_command_vcomCtl1         = 0xC5,
  st_command_vcomOffsetCtl    = 0xC7,
  st_command_lcmVersionCode   = 0xD1,
  st_command_projectCode      = 0xD2,
  st_command_nvmControlStat   = 0xD9,
  st_command_nvmWriteCmdAct   = 0xDF,
  st_command_gammaPlus        = 0xE0,
  st_command_gammaMinus       = 0xE1
};

enum st_memDataAccessCtl {
  st_memDataAccessCtl_horizontal  = 0x4,
  st_memDataAccessCtl_bgr         = 0x8,
  st_memDataAccessCtl_vertical    = 0x10,
  st_memDataAccessCtl_rowColExch  = 0x20,
  st_memDataAccessCtl_colAddrOrd  = 0x40,
  st_memDataAccessCtl_rowAddrOrd  = 0x80
};

enum st_interPixelFormat {
  st_interPixelFormat_12bit   = 0x3,
  st_interPixelFormat_16bit   = 0x5,
  st_interPixelFormat_18bit   = 0x6
};

static const uint8_t ST7735_FONT5X7[95][5] = {
  {0x00,0x00,0x00,0x00,0x00}, // 32 ' '
  {0x00,0x00,0x5F,0x00,0x00}, // 33 '!'
  {0x00,0x07,0x00,0x07,0x00}, // 34 '"'
  {0x14,0x7F,0x14,0x7F,0x14}, // 35 '#'
  {0x24,0x2A,0x7F,0x2A,0x12}, // 36 '$'
  {0x23,0x13,0x08,0x64,0x62}, // 37 '%'
  {0x36,0x49,0x55,0x22,0x50}, // 38 '&'
  {0x00,0x05,0x03,0x00,0x00}, // 39 '''
  {0x00,0x1C,0x22,0x41,0x00}, // 40 '('
  {0x00,0x41,0x22,0x1C,0x00}, // 41 ')'
  {0x14,0x08,0x3E,0x08,0x14}, // 42 '*'
  {0x08,0x08,0x3E,0x08,0x08}, // 43 '+'
  {0x00,0x50,0x30,0x00,0x00}, // 44 ','
  {0x08,0x08,0x08,0x08,0x08}, // 45 '-'
  {0x00,0x60,0x60,0x00,0x00}, // 46 '.'
  {0x20,0x10,0x08,0x04,0x02}, // 47 '/'
  {0x3E,0x51,0x49,0x45,0x3E}, // 48 '0'
  {0x00,0x42,0x7F,0x40,0x00}, // 49 '1'
  {0x42,0x61,0x51,0x49,0x46}, // 50 '2'
  {0x21,0x41,0x45,0x4B,0x31}, // 51 '3'
  {0x18,0x14,0x12,0x7F,0x10}, // 52 '4'
  {0x27,0x45,0x45,0x45,0x39}, // 53 '5'
  {0x3C,0x4A,0x49,0x49,0x30}, // 54 '6'
  {0x01,0x71,0x09,0x05,0x03}, // 55 '7'
  {0x36,0x49,0x49,0x49,0x36}, // 56 '8'
  {0x06,0x49,0x49,0x29,0x1E}, // 57 '9'
  {0x00,0x36,0x36,0x00,0x00}, // 58 ':'
  {0x00,0x56,0x36,0x00,0x00}, // 59 ';'
  {0x08,0x14,0x22,0x41,0x00}, // 60 '<'
  {0x14,0x14,0x14,0x14,0x14}, // 61 '='
  {0x00,0x41,0x22,0x14,0x08}, // 62 '>'
  {0x02,0x01,0x51,0x09,0x06}, // 63 '?'
  {0x32,0x49,0x79,0x41,0x3E}, // 64 '@'
  {0x7E,0x11,0x11,0x11,0x7E}, // 65 'A'
  {0x7F,0x49,0x49,0x49,0x36}, // 66 'B'
  {0x3E,0x41,0x41,0x41,0x22}, // 67 'C'
  {0x7F,0x41,0x41,0x22,0x1C}, // 68 'D'
  {0x7F,0x49,0x49,0x49,0x41}, // 69 'E'
  {0x7F,0x09,0x09,0x09,0x01}, // 70 'F'
  {0x3E,0x41,0x49,0x49,0x7A}, // 71 'G'
  {0x7F,0x08,0x08,0x08,0x7F}, // 72 'H'
  {0x00,0x41,0x7F,0x41,0x00}, // 73 'I'
  {0x20,0x40,0x41,0x3F,0x01}, // 74 'J'
  {0x7F,0x08,0x14,0x22,0x41}, // 75 'K'
  {0x7F,0x40,0x40,0x40,0x40}, // 76 'L'
  {0x7F,0x02,0x0C,0x02,0x7F}, // 77 'M'
  {0x7F,0x04,0x08,0x10,0x7F}, // 78 'N'
  {0x3E,0x41,0x41,0x41,0x3E}, // 79 'O'
  {0x7F,0x09,0x09,0x09,0x06}, // 80 'P'
  {0x3E,0x41,0x51,0x21,0x5E}, // 81 'Q'
  {0x7F,0x09,0x19,0x29,0x46}, // 82 'R'
  {0x46,0x49,0x49,0x49,0x31}, // 83 'S'
  {0x01,0x01,0x7F,0x01,0x01}, // 84 'T'
  {0x3F,0x40,0x40,0x40,0x3F}, // 85 'U'
  {0x1F,0x20,0x40,0x20,0x1F}, // 86 'V'
  {0x7F,0x20,0x18,0x20,0x7F}, // 87 'W'
  {0x63,0x14,0x08,0x14,0x63}, // 88 'X'
  {0x03,0x04,0x78,0x04,0x03}, // 89 'Y'
  {0x61,0x51,0x49,0x45,0x43}, // 90 'Z'
  {0x00,0x7F,0x41,0x41,0x00}, // 91 '['
  {0x02,0x04,0x08,0x10,0x20}, // 92 '\'
  {0x00,0x41,0x41,0x7F,0x00}, // 93 ']'
  {0x04,0x02,0x01,0x02,0x04}, // 94 '^'
  {0x40,0x40,0x40,0x40,0x40}, // 95 '_'
  {0x00,0x01,0x02,0x04,0x00}, // 96 '`'
  {0x20,0x54,0x54,0x54,0x78}, // 97 'a'
  {0x7F,0x48,0x44,0x44,0x38}, // 98 'b'
  {0x38,0x44,0x44,0x44,0x20}, // 99 'c'
  {0x38,0x44,0x44,0x48,0x7F}, //100 'd'
  {0x38,0x54,0x54,0x54,0x18}, //101 'e'
  {0x08,0x7E,0x09,0x01,0x02}, //102 'f'
  {0x0C,0x52,0x52,0x52,0x3E}, //103 'g'
  {0x7F,0x08,0x04,0x04,0x78}, //104 'h'
  {0x00,0x44,0x7D,0x40,0x00}, //105 'i'
  {0x20,0x40,0x44,0x3D,0x00}, //106 'j'
  {0x7F,0x10,0x28,0x44,0x00}, //107 'k'
  {0x00,0x41,0x7F,0x40,0x00}, //108 'l'
  {0x7C,0x04,0x18,0x04,0x78}, //109 'm'
  {0x7C,0x08,0x04,0x04,0x78}, //110 'n'
  {0x38,0x44,0x44,0x44,0x38}, //111 'o'
  {0x7C,0x14,0x14,0x14,0x08}, //112 'p'
  {0x08,0x14,0x14,0x18,0x7C}, //113 'q'
  {0x7C,0x08,0x04,0x04,0x08}, //114 'r'
  {0x48,0x54,0x54,0x54,0x20}, //115 's'
  {0x04,0x3F,0x44,0x40,0x20}, //116 't'
  {0x3C,0x40,0x40,0x20,0x7C}, //117 'u'
  {0x1C,0x20,0x40,0x20,0x1C}, //118 'v'
  {0x3C,0x40,0x30,0x40,0x3C}, //119 'w'
  {0x44,0x28,0x10,0x28,0x44}, //120 'x'
  {0x0C,0x50,0x50,0x50,0x3C}, //121 'y'
  {0x44,0x64,0x54,0x4C,0x44}, //122 'z'
  {0x00,0x08,0x36,0x41,0x00}, //123 '{'
  {0x00,0x00,0x7F,0x00,0x00}, //124 '|'
  {0x00,0x41,0x36,0x08,0x00}, //125 '}'
  {0x10,0x08,0x08,0x10,0x08}, //126 '~'
};

/*
 * Private functions
 */
/*
void _st7735_select(st7735s_t* const pSt);

void _st7735_deselect(st7735s_t* const pSt);

void _st7735_sendCommand(st7735s_t* const pSt, const enum st7735s_command command);

void _st7735_sendDataByte(st7735s_t* const pSt, const uint8_t data);

void _st7735_sendData(st7735s_t* const pSt, const uint8_t* pData, const uint32_t length);

void _st7735_sendDMAData(st7735s_t* const pSt, const uint8_t* pData, const uint32_t length);

void _st7735_updateArea(st7735s_t* const pSt, uint8_t x, uint8_t y);

void _st7735_writeArea(st7735s_t* const pSt);

void _st7735_resetArea(st7735s_t* const pSt);
*/

void st7735_switchInterfacePixelFormat(st7735s_t* const pSt, const enum st_interPixelFormat pixelFormat); 

void st7735_reset(st7735s_t* const pSt);

void st7735_init(st7735s_t* const pSt, uint8_t rst, uint8_t dc, uint8_t bl, uint8_t cs);

void st7735_clearFrame(st7735s_t* const pSt);

void st7735_setPixel(st7735s_t* const pSt, uint8_t x, uint8_t y, uint16_t color);

void st7735_drawBuffered(st7735s_t* const pSt);

void st7735_draw18BitPixel(st7735s_t* const pSt, uint8_t x, uint8_t y, uint32_t color);

void st7735_backlight(st7735s_t* const pSt, uint32_t state);

void st7735_text(st7735s_t* const pSt, const char* text, uint8_t x, uint8_t y, uint8_t size);

void st7735_text18Bit(st7735s_t* const pSt, const char* text, uint8_t x, uint8_t y, uint8_t size);

#endif
